<?php
// $Id$

/**
 * @file
 * Updates Drupal to use the latest version of jQuery.
 */

/**
 * The path to the jQuery files that need to be replaced.
 */
define('JQUERY_UPDATE_REPLACE_PATH', drupal_get_path('module', 'jquery_update') . '/replace');

/**
 * Return the version of jQuery that is installed.
 *
 * This can be used by other modules' hook_requirements() to ensure that the
 * proper version of jQuery is installed.
 *
 * @see version_compare
 */
function jquery_update_get_version($jquery_path = NULL) {
  $version = 0;
  $pattern = '# * jQuery ([0-9\.a-z]+) - New Wave Javascript#';
  
  // No file is passed in so default to the file included with this module.
  if (is_null($jquery_path)) {
    $jquery_path = jquery_update_jquery_path();
  }

  // Return the version provided by jQuery Update.
  $jquery = file_get_contents($jquery_path);
  if (preg_match($pattern, $jquery, $matches)) {
    $version = $matches[1];
  }

  return $version;
}

/**
 * Implementation of hook_js_alter().
 */
function jquery_update_js_alter(&$javascript) {
  // Only replace jquery.js if the version in jQuery Update is newer or providing a different form of compression.
  if (variable_get('jquery_update_replace', TRUE) || variable_get('jquery_update_compression_type', 'pack') != 'pack') {
    $javascript['misc/jquery.js']['data'] = jquery_update_jquery_path();
  }
}

/**
 * Implementation of hook_flush_caches().
 */
function jquery_update_flush_caches() {
  // Find the versions of jQuery provided by core and this module.
  $jquery_update_version = jquery_update_get_version();
  $jquery_core_version = jquery_update_get_version('misc/jquery.js');

  // Set a variable according to whether core's version needs to be replaced.
  $replace = version_compare($jquery_core_version, $jquery_update_version, '<');
  variable_set('jquery_update_replace', $replace);
}

/**
 * Implementation of hook_menu().
 */
function jquery_update_menu() {
  $items['admin/settings/jquery_update'] = array(
    'title' => 'jQuery Update',
    'description' => 'Configure settings for jQuery Update module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_update_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Admin settings form.
 */
function jquery_update_settings() {
  // Clear the javascript cache when the setting is updated and check version of jquery file.
  $form['#submit'][] = 'drupal_clear_js_cache';
  $form['#submit'][] = 'jquery_update_flush_caches';

  $form['jquery_update_compression_type'] = array(
    '#type' => 'radios',
    '#title' => t('jQuery compression type'),
    '#options' => array(
      'pack' => t('Packed'),
      'min' => t('Minified'),
      'none' => t('None'),
    ),
    '#default_value' => variable_get('jquery_update_compression_type', 'pack'),
    '#description' => t('<cite>From <a href="http://docs.jquery.com/Downloading_jQuery">docs.jquery.com</a>:</cite> <q>The minified version, while having a larger file size than the packed version, is generally the best version to use on production deployments. The packed version requires non-trivial client-side processing time to uncompress the code.</q> "None" is provided for debugging purposes, but generally one of the compression options is recommended.'),
  );

  return system_settings_form($form);
}

/**
 * Return the path to the jQuery file.
 */
function jquery_update_jquery_path() {
  $jquery_file = array('none' => 'jquery.js', 'pack' => 'jquery.packed.js', 'min' => 'jquery.min.js');
  return JQUERY_UPDATE_REPLACE_PATH . '/' . $jquery_file[variable_get('jquery_update_compression_type', 'pack')];
}
